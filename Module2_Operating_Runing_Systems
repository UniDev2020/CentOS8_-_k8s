RHEL, CentOS 8
#                                   Module 2
#                          Processes & Memory usage
# if swap mem bigger then anonymous inactive mem it’s a trouble


#                       Shell jobs
# Use <command> & to start a job in the background
# For example while true; do true; done &
# to move a job to the background, first stop it Ctrl+'Z', next type bg
# For example dd if=/dev/zero of=/dev/null move nothing to nowhere

sleep 600                         occupy the console
ctrl+”z”                          put the job into background
jobs                              show running jobs
bg                                put the job in background
sleep 700 &                       run the job in the background
fg                                run the last job in foreground
fg 1                              run the job #1 in foreground
Ctrl+'c'                          stop the job

#                  Get Process with ps
# All tasks are started as processes
# Processes have a PID (process identification number)
#

ps                                show the process of your account
ps aux | head                     show ten top processes
ps aux | less
             VSZ    amount of memory for the proc
             RSS    memory in use in physical RAM
             TTY    show background (?) or foreground proc
             STAT   status of the proc(S –sleeping)
             START  when the proc start
             TIME   how long the proc works
             COMMAND   [] – the part of a kernel
ps aux                           in the end the proc started recently
ps aux | grep syslog             the proc from syslog, logging
ps –ef | head                    additional information
             PPID   the parent process id
ps -fax                          show proc with related link, hierarchical relations

ps -fU <user>                    show all processes owned by user
ps -f --forest -C <process>      show a process tree for a specific process
ps -eo pid,ppid,user,cmd         show custom process list

#                    Memory usage
cat /proc/meminfo                show overcommit Virtual memory
numactl --hardware               show list of nodes
numactl --interleave all command    manage virtual memory
free –m                          show page cache
             available           show mem currently used
grep Cached /proc/meminfo        show page cache
grep active /proc/meminfo        show active/inactive mem
vmtouch /var/lib/db/index        show file in page cache
cat /proc/<pid>/status           show virtual memory
Performance load

uptime                            show sys run & load average, minute, 5 minute, 15 minutes
watch uptime                      command repeat every 2 seconds, if  big number of average in 15 min its a problem
lscpu | less                      show how many cpu in the system
create some job and show its process
dd if=/dev/zero of=/dev/null &    copy nothing to nothing
top                               show the run time processes
                    f             show the options to see
                    w             refresh the top
#                   Signals to processes
man 7 signal                      show man with signals
ps aux | grep dd                  find the pid of the process
ps aux | grep '\<dd'              find with a regular expressions
pidof dd                          show pids of proc
kill [pid]                        kill the proc with signal 15
kill -9 [pid]                     kill with signal 9
pidof dd
killall dd                        kill all processes

top                              is a dashboard, monitor curr sys activity
         f                       show and select from available display fields
         M                       filter on memory usage
         W                       save new display settings
         k                       kill the proc from top
              15                 kill, stop the proc with clean the console
              9                  kill, just kill immediately without cleaning

#                Priorities and Niceness
# real-time processes can be started with highest priority
# to change priorities of non-realtime processes, nice and renice command
# Nice values range from -20 to 19 and rt - real time, before anybody, a highest priority
top
                       r          renice the command
# 3d column - Priority, 4th - Nice
nice -n -1 <command>             it creates a process with a special priority
renice -5 [pid]                  change the priority of the proc

#                             Tuned
# a service that allows for performance optimization in an easy way
# should ensure the tuned service is enabled and started
tuned-adm list                    show a list of profiles
tuned-adm profile <name>          set a profile
tuned-adm active                  confirm your choice

#                         Managing Software
# RPM - Red Hat Package Manager is a package format to install Software
# The package contains a compressed archive of files and a list of pack dependencies
# May contains scripts

#                          Repositories

# Create your own repository that we can install pack from RHEL8 ISO image
dd if=/dev/sr0 of=rhel8.iso bs=1M         create an ISO image
mkdir /repo                               create a dir for repository
# Above RHEL 8 use fstab, after systemd
vi /etc/fstab
> /rhel8.iso    /repo    iso9660   defaults    0 0
mount -a                                  mount the ISO
# Create a repo file
cat > /etc/yum.repos.d/appstream.repo << EOF
> [appstream]
> name=appstream
> baseurl=file:///repo/AppStream
> gpgcheck=0
> EOF
cat > /etc/yum.repos.d/base.repo << EOF
> [BaseOS]
> name=BaseOS
> baseurl=file:///repo/BaseOS
> gpgcheck=0
> EOF
# Show YUM repositories
yum repolist

#                   Modules and Application Streams
#  Use yum to install an application
yum search <app>                            Search an application in the repositories
yum install <app>                           Install and resolving dependencies
yum update                                  Update the repositories
yum provides <*app>                         It searches deeper than search
yum info <app>                              Provides a detail info about an app
yum list all                                Show pack and repo where its available
yum list installed                          Show installed pack

#  Using yum Modules
# If you update previous version to newer, previous will be disable
# yum module install <module>:<version1> and yum module install <module>:<version2>
yum module list
yum module provides <module>                Searches the module that provides a spec pack
yum module info <module>                    Info about a module
yum module info --profile <module>          Shows profiles
yum module list <module>                    Shows which streams are available
yum module install <module>:<version>
yum install @<module>:<version>
yum module install <module>:<version>/<profile>
yum install <module>                        Automatically enable the module stream
yum module enable <module>:<version>        Enables the module but doesn't install anything yet

# Using yum Groups
# are provide to give access to spec categories of software
yum groups list                             List of most common yum groups
yum groups list hidden                      all of these
yum groups info <groupname>                 show which packages are in group
yum groups install <groupname>              install a spec yum group
yum groups install --with-optional <groupname>

# yum history and yum update
yum history                                 gives a list of recent commands
yum history undo <number>                   undo a spec command from history
yum update                                  update all packages on system
yum update <packagename>                    update a package with all dep

# rpm queries
# rpm doesn't consider deps
# rpm is useful to perform package queries
# rpm queries are against the db of installed pack
rpm -qf /any/file                           give a pack name of this file
rpm -ql <pack>                              show files entire pack
rpm -qd <pack>                              show documentation
rpm -qc <pack>                              show a config file
rpm -qp --scripts <pack-file>.rpm           show scripts in pack

#                          Subscription Manager
# It uses only on RHEL
# If you want evaluate, use the free dev subscr, developer.redhat.com
subscription-manager register               register your system
subscription-manager attach --auto          add subs to repository
less redhat.repo                            show certificates

#                          Working with Systemd
# Managed items are called units
# Services, mounts, timers and many more
systemctl -t help                           show all available unit types
systemctl list-unit-files                   show all available with state
systemctl list-units                        current states of all run units
systemctl status <pack>                     show current state of pack
systemctl start <pack>
systemctl enable <pack>                     create a symbolic link and service start auto
systemctl edit service                      edit config file and change behavior

# Default systemd unit files are in /usr/lib/systemd/system
# Custom in /etc/systemd/system
# Run-time auto generated in /run/systemd
# While modifying create a custom file in /etc/systemd/system
# Better use systemctl edit unit.service, auto create a file
systemctl show                              show available parameters
systemctl-reload                            after modifying a unit file
# For example
systemctl cat <service>.service             contents of config file
systemctl show <service>.service            list with all parameters
systemctl edit <service>.service
> [Service]
> Restart=always
> RestartSec=5s                             after 5 seconds
systemctl daemon-reload                     after edit needs to restart
systemctl restart <service>                 restart all the service
killall <service>                           also if you have more than one process
systemctl status <service>                  the service restart activating

#                           Scheduling Tasks
# cron for a regular basis tasks
man 5 cron                                  documentation
# at for tasks that need to be started once
systemctl status atd                        revise the service is running
atq                                         list of jobs
at <time>                                   teatime is 16:00 )) 6 pm, 6 pm tomorrow
> input job
ctrl + 'd'                                  exit
atrm <number>                               remove jobs from a list

# Systemd Timers a new alternative to Cron
man 7 systemd-timer                         documentation
man 7 systemd-time                          specification of time format
vim /etc/systemd/system/fstrim.timer
vim /etc/systemd/system/fstrim.service
systemctl enable fstrim.timer && systemctl start fstrim.timer

crontab -e                                  cron job for the current user
# Config is in /etc/crontab
# generic time-specific cron jobs in /etc/cron.d (cron.daily, .hourly, .monthly, .weekly)
# Anacron uses to jobs not at a specific time
# Config is in /etc/anacrontab
# For example
date                                        show current date and time
crontab -e                                  create a cron job for this account
18 16 * * * logger hello
less /var/log/messages                      find our cron job

#                     Managing temporary files
# /usr/lib/tmpfiles.d dir manages settings for creating, del, cleaning up of temp files
# systemd-tmpfiles-clean.timer unit to auto clean up, it triggers:
# systemd-tmpfiles-clean.service, it runs:
# systemd-tmpfiles --clean
# /usr/lib/tmpfiles.d/tmp.conf contains settings for auto tmp file cleanup
# when making modif copy the files to /etc/tempfiles.d
# after use systemd-tmpfiles --clean /etc/tempfiles.d/tmp.conf to avoid any errors
# tmp.conf includes all info about tmp files
man tmpfiles.d                               documentation

#                          Logging
# systemd-journald includes all events in your system
# By default in memory only, because rsuslogd save it in /var/log
# systemd-journald to /dev/log -> Rsuslogd -> /var/log
# if you create /var/log/journal and restart service systemd-journald
# messages will write to this folder
journalctl                                  utility to show what is going on
journalctl UNIT=<service>                   show last messages from service
systemctl status <unit>                     show most recent messages and status !!!
# Configuration /etc/systemd/journald.conf

#                      Rsyslog logging
# rsyslogd service needs to be running
# main config file is /etc/rsyslog.conf
# snap-in files in /etc/rsyslog.d/ what should be logged and where
# logger line contains: the spec facility that the log is created for
# the severity from which should be logged
# the file or other destination the log should be written to
# logger command to write messages to rsyslog manually
man 5 rsyslog.conf                          documentation
vim /etc/rsyslog.conf
> *.error            /var/log/error         put all error in this folder
cd /etc/rsyslog.d/
vim error
> /var/log/error {                          rotate on a monthly basis, ensure 12 last kept
          monthly
          rotate 12
          create
}

#                     Preserving the Systemd Journal
# The journal is written to /run/log/journal, which is auto cleared up after reboot
# Edit /etc/systemd/journald.conf to make the journal persistent across reboot
# Storage parameter:
systemctl status systemd-journald          show status of the service
mkdir /var/log/journal
mkdir /var/log/
systemctl restart systemd-journald
systemctl status systemd-journald          it shows that journal in use

#                         Logrotate
# it starts through cron.daily to ensure that log files don't grow too big
# Main config is in /etc/logrotate.conf, snap-in files through /etc/logrotate.d/



#                            Storage
# BIOS, MBR has 4 partitions and logical part ext in 4th partition
# 512 bytes to store boot data, 4 part with max 2 TiB
# UEFI, GPT has 128 partitions max
# fdisk to work with MBR, gdisk to use GUID partitions
# parted is default utility in RHEL 8

lsblk                                        list block devices
parted /dev/nvme0n1                          info about device

ls -l /dev/nvm*                              show nvme disks
ls -l /dev/sd*                               show scsi disks
cat /proc/partitions                         show block devicies

#                       Storage options
# Partitions, LVM Logical Volumes, Stratis, Virtual Data Optimizer
#                           parted
parted /dev/sdb
print                                       show if there is a current part table
quit                                        to exit the parted shell
udevadm settle                              ensure that the new partition dev is created
mklabel msdos|gpt                           choice the label of the disk
mkpart <part-type> <name> <fs-type> <start end>
# mkpart one 1MiB 1024MiB
# print
# quit
mkpart                                      interactive mode
#                            fdisk
lsblk
fdisk /dev/<partition>
                      m                     for help
                      n                     add a new partition
                             p              primary
                             +1G            1 GiB partition
                      p                     list of partitions
partprobe                                   make sure everything is updated

#                         File systems
# XFS for RHEL 8 not decreased, Ext4 for RHEL 6 can be decreased
mkfs.xfs                                    create an XFS file system
mkfs.ext4                                   create an Ext4 file system
mkfs.[Tab][Tab]                             show a list of available FS
# do not use mkfs as it will create an Ext2 FS
# mount and unmount the FS
lsblk
mkfs.xfs /dev/<partition>                   create FS with new partition
# mkfs.ext4 /dev/<partition>
mount /dev/<partition> /mnt                 mount the FS
mount | grep '^/'                           show strings just with /
lsof /mnt                                   show last commands using with /mnt
umount /mnt

#                        /etc/fstab
# The main config file to persistently mount partitions
# is used to generate systemd mounts by the systemd-fstab-generator utility

#                        Persistent Device Naming
# UUID is auto generated for each device that contains a file system or a swap device
# Label: arbitrary name for mounting the FS, it avoids from name changing with devices
# Unique device names are created in /dev/disk
blkid                                        show devices UUID
tune2fs --help                               set labels

#                        Systemd mounts
# /etc/fstab already are systemd mounts
# systemd.mounts files, allows yo to be more specific in defining deps
systemctl cat tmp.mount                      show mount configuration
mount -a | grep tmp                          if it shows nothing
systemctl status tmp.mount                   show status
systemctl enable --now tmp.mount
mount | grep tmp
# original file in /usr/lib/systemd/system/tmp.mount /etc/systemd/system/
cp /usr/lib/systemd/system/tmp.mount /etc/systemd/system/<dirname>.mount
vim /etc/systemd/system/<dirname>.mount
# change this file for your mount
systemctl daemon-reload
systemctl status <dirname>.mount
# unmount /<dirname>
# systemctl status <dirname>.mount
# systemctl enable --now <dirname>.mount
# systemctl status <dirname>.mount

#                     Managing XFS File Systems
# xfsdump utility to create backups, full or diff levels of incremental
xfsdump -l 0 -f /backupfiles/data.xfsdump /data        full backup /data
# xfsrestore -f /backupfiles/data.xfsdump /data        restore it
# xfsrepair                                            repair broken XFS FS

#                               Swap partition
# Swap is RAM that is emulated on disk
# While parted swap, set FS to linux-swap
# mkswap to create the swap FS
# activate using swapon
lsblk                                                  list of FS
free -m                                                show mem and swap
vim /etc/fstab
# add > /dev/device          swap          swap       defaults      0 0

#                             Mananging Advanced Storage
#                                  Logical Volume
# if you use  parted <part-numb> set <number> lvm on, if fdisk you can use type 8e
# Use pvcreate /dev/sdb1 to create a physical volume (pv)
pvs                                            show physical volumes
# vgcreate vgada /dev/<partition> ro create a volume group
vgs                                            show volume groups
# lcreate -n lvdata -L 1G vgdata to create the logical volume
lgs                                            show logical volumes
# mkfs.xfs /dev/vgdata/lvdata
# then to /etc/fstab to mount it persistently
# After created LVM Device mapper generates meaningless names, like /dev/dm-0
# Meaningful names are provided as symbolic links through /dev/mapper: /dev/mapper/vgdata-lvdata
#                                    Resizing LVM
df -h                                          show available disk space
vgs                                            show how big volume group and available storage,look at VFree
vgextend <device> <partition>                  add a new physical volume
lvextend -r                                    resize the FS, disk needs to be in a volume group
# also e2resize is an indep resize utility for EXT FS, xfs_growfs to grow an XFS FS
# XFS non shrinkable

#                                     Stratis
# Volume management FS, on top of it a regular FS: XFS
# built on top of any block device, including LVM
# features: Thin provisioning, Snapshots, Cache tier, Programmatic API, monitoring and repair
yum install stratis-cli stratisd               check that the service has installed
systemctl enable --naow stratisd               enable the service
stratis pool create mypool /dev/nvme0n2        create a pool on a device
stratis pool                                   show pools
stratis fs create mypool myfs1                 create fs on top of a pool, auto create XFS
stratis fs                                     list mypool
mkdir /myfs1                                   create a mount point
mount /dev/stratis/mypool/myfs1 /myfs1         mount to dir
stratis pool list                              show a pool
stratis fs list                                show an FS
stratis blockdev list mypool                   info about block devices which use the pool
lsblk                                          show block devices
blkid                                          find the Stratis volume UUID
# mount by UUID in /etc/fstab
#                                      Stratis features
# Extended: Pool can be ext by adding additional block devices
stratis pool add-data mypool /dev/<partition>       to add another block device
# Monitoring Stratis Volume: stratis blockdev, stratis pool, stratis filesystem
# Snapshots: an individual FS, can be modified, uses separately, needs a backing storage for XFS log
stratis fs snapshot mypool myfs1 myfs1-snapshot     to create a snapshot
mount /stratis/mypool/my-fs-snapshot /mnt      mount it
# Revert the original volume to the snapshot state
umount /myfs1
stratis fs destroy mypool myfs1
stratis fs snapshot mypool myfs1-snap myfs1    revert a snapshot
stratis filesystem destroy mypool mysnapshot   delete a snapshot
stratis filesystem destroy mypool myfs         destroy a FS
stratis filesystem destroy mypool mypool       delete a pool
# For example
stratis blockdev                               list of block devices
stratis pool                                   list of pools
stratis filesystem                             list FS
df -h | grep myfs                            not use to monitor stratis devices

#                                        VDO
# Virtual Data Optimizer is used to optimize how data is stored on disk
# used as a separate volume manager on top of which fS will be created
# Provides thin-provisioned storage
# It manages dedup and compres storage pools in RHEL 8
# Ensure that underlying block deveces are > 4 GiB
yum install vdo kmod-kvdo                       install necessary packages
vdo create --name=vdo1 --device=/dev/nvme0np2 --vdoLogicalSize=1T
mkfs.xfs -K /dev/mapper/vdo1
udevadm settle                                  register a new device
mkdir /vdo1
# mount in /etc/fstab, include x-systemd.requires=vdo.service
# vdostats --human-readable

#                                 LUKS Encrypted devices
parted <partition>                              create a partition
cryptsetup luksFormat <partition>               format the LUKS device
cryptsetup luksOpen <partition>                 open it and create a device mapper name
# mount the resulting device mapper device
# to automate the cryptsetup luksOpen, use /etc/crypttab
# to automate mounting volume use /etc/fstab
ls -l /dev/mapper/                              show devices
mkfs.xfs /dev/mapper/secret                     create XFS FS




